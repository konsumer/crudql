import React from 'react'
import gql from 'graphql-tag'
import { Query, Mutation } from 'react-apollo'
import { ButtonModal } from '@crudql/reactstrap'

export const queryGet{{name}} = gql`
  Get{{name}}($id: ID!){
    get{{name}}(id: $id) {
      {{listFields astNode.fields 3}}
    }
  }
`

export const queryList{{plural name}} = gql`
  List{{plural name}}{
    list{{plural name}} {
      {{listFields astNode.fields 3}}
    }
  }
`

export const mutationDelete{{name}} = gql`
  mutation Delete{{name}}($id: ID!){
    delete{{name}}(id: $id){
      id
    }
  }
`

export const mutationUpdate{{name}} = gql`
  mutation Update{{name}}($input: {{name}}Update){
    update{{name}}(input: $input){
      id
    }
  }
`

export const mutationCreate{{name}} = gql`
  mutation Create{{name}}($input: {{name}}New){
    create{{name}}(input: $input){
      id
    }
  }
`

export const Form{{name}} = ({ item }) => {
  // TODO: form goes here
  return null
}

export const ButtonNew{{name}} = ({ item, ...props }) => {
  return (
    <Mutation mutation={mutationCreate{{~name~}}}>
      {({ mutate }) => (
        <ButtonModal
          title='Create {{name}}'
          content={<Form{{name}} />} onComplete={() => mutate({ variables: { input: item } })}
          {...props}
        />
      )}
    </Mutation>
  )
}

export const ButtonEdit{{name}} = ({ item, ...props }) => {
  return (
    <Mutation mutation={mutationUpdate{{~name~}}}>
      {({ mutate }) => (
        <ButtonModal 
          title='Edit {{name}}'
          content={<Form{{name}} item={item} />}
          onComplete={() => mutate({ variables: { input: item } })}
          {...props}
        />
      )}
    </Mutation>
  )
}

export const ButtonDelete{{name}} = ({ item, ...props }) => {
  return (
    <Mutation mutation={mutationDelete{{~name~}}}>
      {({ mutate }) => (
        <ButtonModal
          title='Delete {{name}}'
          content='Are you sure you want to delete this {{name}}?'
          onComplete={() => mutate({ variables: { id: item.id } })}
          {...props}
        />
      )}
    </Mutation>
  )
}

export const List{{plural name}} = () => (
  <Query query={queryList{{~plural name~}}}>
    {({ data, loading }) => !loading && (
      <table>
        <thead>
          <tr>
            {{#each astNode.fields}}
            <th>{{name.value}}</th>
            {{/each}}
            <th />
          </tr>
        </thead>
        <tbody>
          {data.list{{plural name}}.map(d => (
            <tr>
              {{#each astNode.fields}}
              <td>{d.{{~name.value~}}}</td>
              {{/each}}
              <td>
                <ButtonDelete{{name}} item={d} color='danger'><i className='material-icons'>delete</i></ButtonDelete{{name}}>
                <ButtonEdit{{name}} item={d} color='secondary'><i className='material-icons'>edit</i></ButtonEdit{{name}}>
              </td>
            </tr>
          )) }
        </tbody>
      </table>
    )}
  </Query>
)
