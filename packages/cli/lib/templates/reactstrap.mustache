import React from 'react'
import gql from 'graphql-tag'
import { Query, Mutation } from 'react-apollo'
import { ButtonModal } from '@crudql/reactstrap'
import { Table, ButtonGroup } from 'reactstrap'

export const queryGet{{name}} = gql`
  query Get{{name}}($id: ID!){
    get{{name}}(id: $id) {
      {{listFields astNode.fields 3}}
    }
  }
`

export const queryList{{plural name}} = gql`
  query List{{plural name}}{
    list{{plural name}} {
      {{listFields astNode.fields 3}}
    }
  }
`

export const mutationDelete{{name}} = gql`
  mutation Delete{{name}}($id: ID!){
    delete{{name}}(id: $id){
      id
    }
  }
`

export const mutationUpdate{{name}} = gql`
  mutation Update{{name}}($input: {{name}}Update){
    update{{name}}(input: $input){
      id
    }
  }
`

export const mutationCreate{{name}} = gql`
  mutation Create{{name}}($input: {{name}}New){
    create{{name}}(input: $input){
      id
    }
  }
`

export const Form{{name}} = ({ item }) => {
  // TODO: form goes here
  return null
}

export const ButtonNew{{name}} = ({ item, ...props }) => {
  return (
    <Mutation mutation={mutationCreate{{~name~}}}>
      {({ mutate }) => (
        <ButtonModal
          title='Create {{name}}'
          content={<Form{{name}} />} onComplete={() => mutate({ variables: { input: item } })}
          {...props}
        />
      )}
    </Mutation>
  )
}

export const ButtonEdit{{name}} = ({ item, ...props }) => {
  return (
    <Mutation mutation={mutationUpdate{{~name~}}}>
      {({ mutate }) => (
        <ButtonModal 
          title='Edit {{name}}'
          content={<Form{{name}} item={item} />}
          onComplete={() => mutate({ variables: { input: item } })}
          {...props}
        />
      )}
    </Mutation>
  )
}

export const ButtonDelete{{name}} = ({ item, ...props }) => {
  return (
    <Mutation mutation={mutationDelete{{~name~}}}>
      {({ mutate }) => (
        <ButtonModal
          title='Delete {{name}}'
          content='Are you sure you want to delete this {{name}}?'
          onComplete={() => mutate({ variables: { id: item.id } })}
          {...props}
        />
      )}
    </Mutation>
  )
}

export const List{{plural name}} = () => (
  <Query query={queryList{{~plural name~}}}>
    {({ data, loading }) => {
      if (loading) {
        return <div>Loading...</div>
      } else {
        if (!data || !data.list{{plural name}} || !data.list{{plural name}}.length) {
          return <div>No {{plural name}}.</div>
        } else {
          const onCompleteDelete = () => {
            // you could put a redirect here or something.
            alert('{{name}} deleted.')
          }

          const onCompleteEdit = () => {
            // you could put a redirect here or something.
            alert('{{name}} saved.')
          }
          return (
            <Table>
              <thead>
                <tr>
                  {{#each astNode.fields}}
                  <th>{{name.value}}</th>
                  {{/each}}
                  <th />
                </tr>
              </thead>
              <tbody>
                {data.list{{plural name}}.map(d => (
                  <tr key={d.id}>
                    {{#each astNode.fields}}
                    <td>{d.{{~name.value~}}}</td>
                    {{/each}}
                    <td>
                      <ButtonGroup className='btn-group-fluid'>
                        <ButtonDelete{{name}} label='Delete this {{name}}' onComplete={onCompleteDelete} item={d} outline color='danger' className='btn-sm'><i className='material-icons'>delete</i></ButtonDelete{{name}}>
                        <ButtonEdit{{name}} label='Edit this {{name}}' onComplete={onCompleteEdit} item={d} outline color='secondary' className='btn-sm'><i className='material-icons'>edit</i></ButtonEdit{{name}}>
                      </ButtonGroup>
                    </td>
                  </tr>
                )) }
              </tbody>
            </Table>
          )
        }
      }
    }}
  </Query>
)
